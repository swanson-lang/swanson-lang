/* -*- coding: utf-8 -*-
 * ----------------------------------------------------------------------
 * Copyright Â© 2012, RedJack, LLC.
 * All rights reserved.
 *
 * Please see the LICENSE.txt file in this distribution for license
 * details.
 * ----------------------------------------------------------------------
 */

#include <assert.h>
#include <stdio.h>

#include <libcork/core.h>
#include <libcork/helpers/errors.h>

#include "swanson/kernel.h"
#include "swanson/metamodel.h"


_declare_simple_opset_(swan_size);

int
swan_size_new(struct swan_value *dest, size_t value)
{
    size_t  *content = cork_new(size_t);
    *content = value;
    dest->representation = SWAN_REP_SIZE;
    dest->opset = simple_opset(swan_size);
    dest->content = content;
    return 0;
}

_static_op_(swan_size, unref)
{
    size_t  *self;
    assert(param_count == 1);
    rip_check(self = swan_value_to_size(&params[0]));
    free(self);
    swan_value_clear(&params[0]);
    return 0;
}

_static_op_(swan_size, print)
{
    size_t  *self;
    assert(param_count == 1);
    rip_check(self = swan_value_to_size(&params[0]));
    printf("%zu\n", *self);
    return 0;
}

_static_op_(swan_size, add)
{
    size_t  *lhs;
    size_t  *rhs;
    assert(param_count == 3);
    assert(swan_value_is_empty(&params[0]));
    rip_check(lhs = swan_value_to_size(&params[1]));
    rip_check(rhs = swan_value_to_size(&params[2]));
    return swan_size_new(&params[0], *lhs + *rhs);
}

_static_op_(swan_size, eq)
{
    size_t  *lhs;
    size_t  *rhs;
    assert(param_count == 3);
    assert(swan_value_is_empty(&params[0]));
    rip_check(lhs = swan_value_to_size(&params[1]));
    rip_check(rhs = swan_value_to_size(&params[2]));
    return swan_boolean_new(&params[0], *lhs == *rhs);
}

_static_op_(swan_size, ne)
{
    size_t  *lhs;
    size_t  *rhs;
    assert(param_count == 3);
    assert(swan_value_is_empty(&params[0]));
    rip_check(lhs = swan_value_to_size(&params[1]));
    rip_check(rhs = swan_value_to_size(&params[2]));
    return swan_boolean_new(&params[0], *lhs != *rhs);
}

_simple_opset_(swan_size)
{
    get_static_op("+", swan_size, add);
    get_static_op("==", swan_size, eq);
    get_static_op("!=", swan_size, ne);
    get_static_op("print", swan_size, print);
    get_static_op("~unref", swan_size, unref);
    return NULL;
}


_static_op_(swan_size, init)
{
    assert(param_count == 1);
    rip_check(swan_value_to_assignable(&params[0]));
    return 0;
}

_static_op_(swan_size, get)
{
    struct swan_assignable  *self;
    size_t  *content;
    assert(param_count == 2);
    assert(swan_value_is_empty(&params[0]));
    rip_check(self = swan_value_to_assignable(&params[1]));
    content = self->content;
    return swan_size_new(&params[0], *content);
}

_static_op_(swan_size, set)
{
    struct swan_assignable  *self;
    size_t  *content;
    size_t  *src;
    assert(param_count == 2);
    rip_check(self = swan_value_to_assignable(&params[0]));
    rip_check(src = swan_value_to_size(&params[1]));
    content = self->content;
    *content = *src;
    return 0;
}

_simple_opset_(swan_size__type)
{
    get_static_op("init", swan_size, init);
    get_static_op("*", swan_size, get);
    get_static_op("=", swan_size, set);
    return NULL;
}

_type_(swan_size, sizeof(size_t));


_static_op_(swan_size, literal)
{
    struct cork_buffer  buf = CORK_BUFFER_INIT();
    struct swan_string  *src;
    char  *startptr;
    char  *endptr = NULL;
    uint64_t  result;

    assert(param_count == 2);
    assert(swan_value_is_empty(&params[0]));
    rip_check(src = swan_value_to_string(&params[1]));

    /* Ensure that src is NUL-terminated */
    cork_buffer_set(&buf, src->data, src->size);

    /* Parse the string */
    startptr = buf.buf;
#if SIZEOF_LONG == 8
    result = strtoul(startptr, &endptr, 0);
#else
    result = strtoull(startptr, &endptr, 0);
#endif
    if (*startptr != '\0' && *endptr == '\0') {
        /* String was valid and non-empty */
        cork_buffer_done(&buf);
        return swan_size_new(&params[0], result);
    } else {
        swan_bad_value("Invalid size literal \"%s\"", startptr);
        cork_buffer_done(&buf);
        return -1;
    }
}

_simple_opset_(swan_kernel_size)
{
    get_static_op("~literal", swan_size, literal);
    get_static_op("type", swan_size, type);
    get_static_op("~unref", swan_static, unref);
    return NULL;
}


#define builtin_sizes(_) \
    _(int8, int8_t) \
    _(int16, int16_t) \
    _(int32, int32_t) \
    _(int64, int64_t) \
    _(char, char) \
    _(short, short) \
    _(int, int) \
    _(long, long) \
    _(pointer, void *) \
    _(size, size_t) \

#define sizeof_op(name, c_type) \
_static_op_(swan_kernel_sizeof, name) \
{ \
    assert(param_count == 1); \
    assert(swan_value_is_empty(&params[0])); \
    return swan_size_new(&params[0], sizeof(c_type)); \
}

builtin_sizes(sizeof_op);
#undef sizeof_op

_simple_opset_(swan_kernel_sizeof)
{
#define sizeof_get(name, c_type) \
    get_static_op(#name, swan_kernel_sizeof, name);
    builtin_sizes(sizeof_get);
#undef sizeof_get
    get_static_op("~unref", swan_static, unref);
    return NULL;
}
