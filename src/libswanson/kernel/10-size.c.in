/* -*- coding: utf-8 -*-
 * ----------------------------------------------------------------------
 * Copyright Â© 2012, RedJack, LLC.
 * All rights reserved.
 *
 * Please see the LICENSE.txt file in this distribution for license
 * details.
 * ----------------------------------------------------------------------
 */

#include <assert.h>
#include <stdio.h>

#include <libcork/core.h>
#include <libcork/helpers/errors.h>

#include "swanson/kernel.h"
#include "swanson/metamodel.h"


_static_op_(swan_size, init)
{
    assert(param_count == 1);
    return 0;
}

_static_op_(swan_size, print)
{
    size_t  *self;
    assert(param_count == 1);
    rip_check(self = swan_value_get_size(&params[0]));
    printf("%zu\n", *self);
    return 0;
}

_static_op_(swan_size, assign)
{
    size_t  *self;
    size_t  *src;
    assert(param_count == 2);
    rip_check(self = swan_value_get_size(&params[0]));
    rip_check(src = swan_value_get_size(&params[1]));
    *self = *src;
    return 0;
}

_static_op_(swan_size, add)
{
    size_t  *self;
    size_t  *lhs;
    size_t  *rhs;
    assert(param_count == 3);
    rip_check(self = swan_value_get_size(&params[0]));
    rip_check(lhs = swan_value_get_size(&params[1]));
    rip_check(rhs = swan_value_get_size(&params[2]));
    *self = *lhs + *rhs;
    return 0;
}

_simple_opset_(swan_size)
{
    get_static_op("=", swan_size, assign);
    get_static_op("+", swan_size, add);
    get_static_op("print", swan_size, print);
    return NULL;
}

_static_type_(swan_size, simple_opset, sizeof(size_t));



#define builtin_sizes(_) \
    _(int8, int8_t) \
    _(int16, int16_t) \
    _(int32, int32_t) \
    _(int64, int64_t) \
    _(char, char) \
    _(short, short) \
    _(int, int) \
    _(long, long) \
    _(pointer, void *) \
    _(size, size_t) \

#define sizeof_op(name, c_type) \
_static_op_(swan_kernel_sizeof, name) \
{ \
    size_t  *dest; \
    assert(param_count == 1); \
    rip_check(dest = swan_value_get_size(&params[0])); \
    *dest = sizeof(c_type); \
    return 0; \
}

builtin_sizes(sizeof_op);
#undef sizeof_op

_simple_opset_(swan_kernel_sizeof)
{
#define sizeof_get(name, c_type) \
    get_static_op(#name, swan_kernel_sizeof, name);
    builtin_sizes(sizeof_get);
#undef sizeof_get
    get_static_op("~alias", swan_static, alias);
    get_static_op("~unref", swan_static, unref);
    return NULL;
}
