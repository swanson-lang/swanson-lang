/* -*- coding: utf-8 -*-
 * ----------------------------------------------------------------------
 * Copyright Â© 2012, RedJack, LLC.
 * All rights reserved.
 *
 * Please see the LICENSE.txt file in this distribution for license
 * details.
 * ----------------------------------------------------------------------
 */

#include <assert.h>

#include <libcork/core.h>
#include <libcork/helpers/errors.h>
#include <libcork/helpers/gc.h>

#include "swanson/kernel.h"
#include "swanson/metamodel.h"


/*-----------------------------------------------------------------------
 * Fixed-size arrays
 */

struct swan_array_element {
    struct swan_assignable  parent;
    struct swan_value  array;
};

struct swan_array_type {
    struct swan_type  parent;

    struct swan_opset  *base_element_opset;
    size_t  element_size;
    size_t  element_count;

    struct swan_opset  element_opset;

    struct swan_opset  array_opset;
    struct swan_operation  init;
    struct swan_operation  claim;
    struct swan_operation  each;
};


_static_op_(swan_array__element, unref)
{
    struct swan_assignable  *vself;
    struct swan_array_element  *self;
    assert(param_count == 1);
    rip_check(vself = swan_value_to_assignable(&params[0]));
    self = cork_container_of(vself, struct swan_array_element, parent);
    swan_value_unref(&self->array);
    free(self);
    swan_value_clear(&params[0]);
    return 0;
}

_static_op_(swan_array__element, return)
{
    struct swan_assignable  *vself;
    struct swan_array_element  *self;
    assert(param_count == 2);
    rip_check(vself = swan_value_to_assignable(&params[0]));
    assert(swan_value_is_empty(&params[1]));
    self = cork_container_of(vself, struct swan_array_element, parent);
    params[1] = self->array;
    free(self);
    swan_value_clear(&params[0]);
    return 0;
}

_get_operation_(swan_array__element)
{
    struct swan_array_type  *self =
        cork_container_of(opset, struct swan_array_type, element_opset);
    get_static_op("return", swan_array__element, return);
    get_static_op("~unref", swan_array__element, unref);
    return swan_opset_get_operation(self->base_element_opset, op_name);
}

static struct swan_opset *
swan_array__element_alias(struct swan_opset *opset)
{
    struct swan_array_type  *self =
        cork_container_of(opset, struct swan_array_type, element_opset);
    cork_gc_incref(self);
    return opset;
}

static void
swan_array__element_unref(struct swan_opset *opset)
{
    struct swan_array_type  *self =
        cork_container_of(opset, struct swan_array_type, element_opset);
    cork_gc_decref(self);
}


_evaluate_(swan_array, init)
{
    struct swan_assignable  *array;
    struct swan_array_type  *type;
    size_t  i;

    assert(param_count == 1);
    rip_check(array = swan_value_to_assignable(&params[0]));
    type = cork_container_of(operation, struct swan_array_type, init);

    for (i = 0; i < type->element_count; i++) {
        struct swan_value  values[3];
        values[0] = params[0];
        swan_value_clear(&values[1]);
        rii_check(swan_size_new(&values[2], i));
        rii_check(swan_value_evaluate(&params[0], "[]", 3, values));
        rii_check(swan_value_evaluate(&values[1], "init", 1, &values[1]));
        rii_check(swan_value_unref(&values[2]));

        values[0] = values[1];
        swan_value_clear(&values[1]);
        rii_check(swan_value_evaluate(&values[0], "return", 2, values));
    }

    return 0;
}

_evaluate_(swan_array, claim)
{
    struct swan_assignable  *array;
    struct swan_array_type  *type;
    struct swan_array_element  *element;
    size_t  *index;

    assert(param_count == 3);
    rip_check(array = swan_value_to_assignable(&params[0]));
    assert(swan_value_is_empty(&params[1]));
    type = cork_container_of(operation, struct swan_array_type, claim);
    rip_check(index = swan_value_to_size(&params[2]));

    element = cork_new(struct swan_array_element);
    element->parent.content = array->content + (*index * type->element_size);
    element->array = params[0];

    params[1].representation = SWAN_REP_ASSIGNABLE;
    params[1].opset = &type->element_opset;
    params[1].content = element;
    swan_value_clear(&params[0]);

    return 0;
}

_evaluate_(swan_array, each)
{
    size_t  i;
    struct swan_assignable  *array;
    struct swan_block  *block;
    struct swan_array_type  *type;
    struct swan_value  *values;
    size_t  value_count;

    assert(param_count >= 2);
    rip_check(array = swan_value_to_assignable(&params[0]));
    rip_check(block = swan_value_to_block(&params[1]));
    type = cork_container_of(operation, struct swan_array_type, each);

    /* The array and block are replaced by the block, element, and index. */
    value_count = param_count + 1;
    values = cork_calloc(value_count, sizeof(struct swan_value));
    memcpy(&values[3], &params[2],
           (param_count - 2) * sizeof(struct swan_value));

    for (i = 0; i < type->element_count; i++) {
        /* Extract the current element using the [] operation. */
        values[0] = params[0];
        swan_value_clear(&values[1]);
        rii_check(swan_size_new(&values[2], i));
        rii_check(swan_value_evaluate(&params[0], "[]", 3, values));

        /* Evaluate the block. */
        values[0] = params[1];  /* block */
        rii_check(swan_value_evaluate(&values[0], "()", value_count, values));
        rii_check(swan_value_unref(&values[2]));

        /* Return the element */
        values[0] = values[1];
        swan_value_clear(&values[1]);
        rii_check(swan_value_evaluate(&values[0], "return", 2, values));
    }

    /* Copy the extras parameters back, in case they've changed. */
    memcpy(&params[2], &values[3],
           (param_count - 2) * sizeof(struct swan_value));
    free(values);
    return 0;
}

_get_operation_(swan_array)
{
    struct swan_array_type  *self =
        cork_container_of(opset, struct swan_array_type, array_opset);
    get_op("init", &self->init);
    get_op("[]", &self->claim);
    get_op("each", &self->each);
    return NULL;
}

static struct swan_opset *
swan_array__array_alias(struct swan_opset *opset)
{
    struct swan_array_type  *self =
        cork_container_of(opset, struct swan_array_type, array_opset);
    cork_gc_incref(self);
    return opset;
}

static void
swan_array__array_unref(struct swan_opset *opset)
{
    struct swan_array_type  *self =
        cork_container_of(opset, struct swan_array_type, array_opset);
    cork_gc_decref(self);
}


_static_op_(swan_array__type, unref)
{
    struct swan_type  *vself;
    struct swan_array_type  *self;
    assert(param_count == 1);
    rip_check(vself = swan_value_to_type(&params[0]));
    self = cork_container_of(vself, struct swan_array_type, parent);
    cork_gc_decref(self);
    swan_value_clear(&params[0]);
    return 0;
}

_simple_opset_(swan_array__type)
{
    get_static_op("~unref", swan_array__type, unref);
    return NULL;
}


_free_(swan_array_type)
{
    struct swan_array_type  *self = obj;
    swan_opset_unref(self->base_element_opset);
}

_gc_no_recurse_(swan_array_type);

int
swan_array_type_new(struct swan_value *dest, struct swan_type *element_type,
                    size_t element_count)
{
    struct swan_array_type  *self = cork_gc_new(swan_array_type);

    self->element_opset.get_operation = swan_array__element__get_operation;
    self->element_opset.alias = swan_array__element_alias;
    self->element_opset.unref = swan_array__element_unref;

    self->array_opset.get_operation = swan_array__get_operation;
    self->array_opset.alias = swan_array__array_alias;
    self->array_opset.unref = swan_array__array_unref;
    self->init.evaluate = eval_func(swan_array, init);
    self->claim.evaluate = eval_func(swan_array, claim);
    self->each.evaluate = eval_func(swan_array, each);

    self->parent.instance_size = element_count * element_type->instance_size;
    self->parent.opset = &self->array_opset;
    self->base_element_opset = swan_opset_alias(element_type->opset);
    self->element_size = element_type->instance_size;
    self->element_count = element_count;

    dest->representation = SWAN_REP_TYPE;
    dest->opset = simple_opset(swan_array__type);
    dest->content = self;
    return 0;
}



_static_op_(swan_kernel, array)
{
    struct swan_type  *type;
    size_t  *element_count;

    assert(param_count == 3);
    assert(swan_value_is_empty(&params[0]));
    rip_check(type = swan_value_to_type(&params[1]));
    rip_check(element_count = swan_value_to_size(&params[2]));
    return swan_array_type_new(&params[0], type, *element_count);
}
