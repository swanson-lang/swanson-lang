/* -*- coding: utf-8 -*-
 * ----------------------------------------------------------------------
 * Copyright Â© 2012, RedJack, LLC.
 * All rights reserved.
 *
 * Please see the LICENSE.txt file in this distribution for license
 * details.
 * ----------------------------------------------------------------------
 */

#include <assert.h>
#include <stdio.h>
#include <string.h>

#include <libcork/core.h>

#include "swanson/kernel.h"
#include "swanson/metamodel.h"


_static_op_(swan_string, unref)
{
    struct swan_string  *self;
    assert(param_count == 1);
    rip_check(self = swan_value_to_string(&params[0]));
    free(self);
    swan_value_clear(&params[0]);
    return 0;
}

_static_op_(swan_string, print)
{
    struct swan_string  *self;
    assert(param_count == 1);
    rip_check(self = swan_value_to_string(&params[0]));
    printf("%.*s\n", (int) self->size, (char *) self->data);
    return 0;
}

_simple_opset_(swan_string)
{
    get_static_op("print", swan_string, print);
    get_static_op("~unref", swan_string, unref);
    return NULL;
}


int
swan_string_new(struct swan_value *dest, const void *data, size_t size)
{
    struct swan_string  *str;
    assert(swan_value_is_empty(dest));
    str = cork_malloc(sizeof(struct swan_string) + size);
    str->data = (void *) (str + 1);
    str->size = size;
    memcpy(str->data, data, size);
    dest->representation = SWAN_REP_STRING;
    dest->opset = simple_opset(swan_string);
    dest->content = str;
    return 0;
}
